package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate m_joinpred;
    private DbIterator m_child1;
    private DbIterator m_child2;
    private Tuple m_currentLeftTuple;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     *
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	m_joinpred = p;
    	m_child1 = child1;
    	m_child2 = child2;
    	m_currentLeftTuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return m_joinpred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return m_child1.getTupleDesc().getFieldName(m_joinpred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return m_child2.getTupleDesc().getFieldName(m_joinpred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(m_child1.getTupleDesc(), m_child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	super.open();
    	m_child1.open();
    	m_child2.open();
    }

    public void close() {
        // some code goes here
    	super.close();
    	m_child1.close();
    	m_child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	m_child1.rewind();
    	m_child2.rewind();
    	m_currentLeftTuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross1	2 r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
    	while ((m_currentLeftTuple != null) || m_child1.hasNext())
    	{
    		Tuple leftTuple;
    		if ((m_currentLeftTuple != null))
    		{
    			leftTuple = m_currentLeftTuple;
    		}
    		else
    		{
    			m_currentLeftTuple = m_child1.next();
    			leftTuple = m_currentLeftTuple;
    		}
//    		System.out.print("left tuple: " + leftTuple.toString());
//    		System.out.print("current left tuple: " + m_currentLeftTuple.toString());
    		while (m_child2.hasNext())
    		{
    			Tuple rightTuple = m_child2.next();
//        		System.out.print("right tuple: " + rightTuple.toString());
    			if (m_joinpred.filter(leftTuple, rightTuple))
				{
    				return joinTuples(leftTuple, rightTuple);
				}
    		}
    		m_currentLeftTuple = null;
    		m_child2.rewind();
    	}
        return null;
    }

    private Tuple joinTuples(Tuple leftTuple, Tuple rightTuple)
    {
		int leftTupleSize = leftTuple.getTupleDesc().numFields();
		int rightTupleSize = rightTuple.getTupleDesc().numFields();
		Tuple mergedTuple = new Tuple(this.getTupleDesc());
		for (int i = 0; i < leftTupleSize; i++)
		{
			mergedTuple.setField(i, leftTuple.getField(i));
		}
		for (int i = 0; i < rightTupleSize; i++)
		{
			mergedTuple.setField(leftTupleSize + i, rightTuple.getField(i));
		}
//		System.out.println("merged tuple: " + mergedTuple.toString());
		return mergedTuple;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {m_child1, m_child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	m_child1 = children[0];
    	m_child2 = children[1];
    }

}
